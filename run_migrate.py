import os
from database.database import engine
from database.models import Base
import sqlite3
from datetime import datetime

def run_migrations():
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    db_path = "error_monitor.db"
    if os.path.exists(db_path):
        os.remove(db_path)
        print("üóëÔ∏è –°—Ç–∞—Ä–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–Ω–æ–≤–æ
    Base.metadata.create_all(engine)
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('error_monitor.db')
    cursor = conn.cursor()
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É last_heartbeat, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        cursor.execute('''
        ALTER TABLE projects 
        ADD COLUMN last_heartbeat TIMESTAMP
        ''')
        print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ last_heartbeat –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    except sqlite3.OperationalError as e:
        if "duplicate column name" in str(e):
            print("‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ last_heartbeat —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    conn.commit()
    conn.close()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

if __name__ == "__main__":
    run_migrations() 