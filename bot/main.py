import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, ConversationHandler, CallbackQueryHandler
import os
import uuid
from dotenv import load_dotenv
from sqlalchemy.orm import Session
from datetime import datetime, timedelta
import asyncio
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from database.database import get_db
from database.models import Project, Subscriber, ErrorLog, Heartbeat

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
PROJECT_NAME, PROJECT_TYPE = range(2)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logger = logging.getLogger(__name__)

async def check_projects_status(context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤
    """
    try:
        db = next(get_db())
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–µ–∫—Ç—ã, –æ—Ç –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –±—ã–ª–æ heartbeat –±–æ–ª–µ–µ —á–∞—Å–∞
            one_hour_ago = datetime.utcnow() - timedelta(hours=1)
            inactive_projects = db.query(Project).filter(
                Project.is_active == True,
                (Project.last_heartbeat < one_hour_ago) | (Project.last_heartbeat == None)
            ).all()

            for project in inactive_projects:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
                subscribers = db.query(Subscriber).filter(
                    Subscriber.subscribed_projects.contains([project.id])
                ).all()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                for subscriber in subscribers:
                    try:
                        await context.bot.send_message(
                            chat_id=subscriber.telegram_id,
                            text=(
                                f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ! –ü—Ä–æ–µ–∫—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω</b>\n\n"
                                f"üìù –ü—Ä–æ–µ–∫—Ç: <b>{project.name}</b>\n"
                                f"üè∑Ô∏è –¢–∏–ø: <b>{project.type}</b>\n"
                                f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π heartbeat: <b>{project.last_heartbeat.strftime('%Y-%m-%d %H:%M:%S') if project.last_heartbeat else '–ù–∏–∫–æ–≥–¥–∞'}</b>\n\n"
                                "–ü—Ä–æ–µ–∫—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª —Å–∏–≥–Ω–∞–ª—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ–ª–µ–µ —á–∞—Å–∞."
                            ),
                            parse_mode='HTML'
                        )
                    except Exception as e:
                        logger.error(f"Error sending notification to {subscriber.telegram_id}: {e}")

        finally:
            db.close()
    except Exception as e:
        logger.exception("Error in check_projects_status")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    full_name = update.effective_user.full_name

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
    db = next(get_db())
    subscriber = db.query(Subscriber).filter_by(telegram_id=user_id).first()
    
    if not subscriber:
        subscriber = Subscriber(
            telegram_id=user_id,
            full_name=full_name
        )
        db.add(subscriber)
        db.commit()

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—à–∏–±–æ–∫. "
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    is_admin = False
    db = next(get_db())
    subscriber = db.query(Subscriber).filter_by(telegram_id=update.effective_user.id).first()
    
    if subscriber and subscriber.is_admin:
        is_admin = True

    help_text = """
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/mysubs - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏
"""

    if is_admin:
        admin_commands = """
–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:
/addproject - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
/listprojects - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
/editproject - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
/deleteproject - –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
/addadmin - –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—à–∏–±–∫–∞–º
/broadcast - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
"""
        help_text += admin_commands

    await update.message.reply_text(help_text)

async def add_project(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    db = next(get_db())
    subscriber = db.query(Subscriber).filter_by(telegram_id=update.effective_user.id).first()
    
    if not subscriber or not subscriber.is_admin:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return ConversationHandler.END

    await update.message.reply_text(
        "–î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:"
    )
    return PROJECT_NAME

async def project_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
    context.user_data['project_name'] = update.message.text
    
    keyboard = [
        [
            InlineKeyboardButton("Bot ü§ñ", callback_data='type_bot'),
            InlineKeyboardButton("Website üåê", callback_data='type_website'),
            InlineKeyboardButton("Other üì¶", callback_data='type_other')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞:",
        reply_markup=reply_markup
    )
    return PROJECT_TYPE

async def project_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
    query = update.callback_query
    await query.answer()
    
    project_type = query.data.replace('type_', '')
    project_name = context.user_data['project_name']
    project_token = str(uuid.uuid4())
    
    db = next(get_db())
    new_project = Project(
        name=project_name,
        type=project_type,
        token=project_token,
        is_active=True
    )
    db.add(new_project)
    db.commit()
    
    response_text = f"""
‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!

üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {project_name}
üè∑Ô∏è –¢–∏–ø: {project_type}
üîë –¢–æ–∫–µ–Ω: `{project_token}`

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å SDK.
"""
    await query.edit_message_text(response_text, parse_mode='Markdown')
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞"""
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    db = next(get_db())
    subscriber = db.query(Subscriber).filter_by(telegram_id=update.effective_user.id).first()
    
    if not subscriber or not subscriber.is_admin:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    total_errors = db.query(ErrorLog).count()
    active_projects = db.query(Project).filter(Project.is_active == True).count()
    total_subscribers = db.query(Subscriber).count()

    stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

–í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {active_projects}
–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {total_errors}
–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {total_subscribers}
"""
    await update.message.reply_text(stats_text)

async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
        projects = db.query(Project).filter(Project.is_active == True).all()
        
        if not projects:
            await update.message.reply_text("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏.")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏
        keyboard = []
        for project in projects:
            keyboard.append([InlineKeyboardButton(
                f"{project.name} ({project.type})", 
                callback_data=f"subscribe_{project.id}"
            )])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:",
            reply_markup=reply_markup
        )
    finally:
        db.close()

async def unsubscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        subscriber = db.query(Subscriber).filter_by(telegram_id=update.effective_user.id).first()
        if not subscriber or not subscriber.subscribed_projects:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        projects = db.query(Project).filter(Project.id.in_(subscriber.subscribed_projects)).all()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏
        keyboard = []
        for project in projects:
            keyboard.append([InlineKeyboardButton(
                f"{project.name} ({project.type})", 
                callback_data=f"unsubscribe_{project.id}"
            )])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏:",
            reply_markup=reply_markup
        )
    finally:
        db.close()

async def mysubs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    db = next(get_db())
    try:
        subscriber = db.query(Subscriber).filter_by(telegram_id=update.effective_user.id).first()
        if not subscriber or not subscriber.subscribed_projects:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
            return

        projects = db.query(Project).filter(Project.id.in_(subscriber.subscribed_projects)).all()
        
        message = "–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
        for project in projects:
            message += f"üìå {project.name} ({project.type})\n"
        
        await update.message.reply_text(message)
    finally:
        db.close()

async def listprojects(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    db = next(get_db())
    try:
        subscriber = db.query(Subscriber).filter_by(telegram_id=update.effective_user.id).first()
        if not subscriber or not subscriber.is_admin:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        projects = db.query(Project).all()
        if not projects:
            await update.message.reply_text("–ü—Ä–æ–µ–∫—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            return

        message = "–°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤:\n\n"
        for project in projects:
            status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if project.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            last_heartbeat = project.last_heartbeat.strftime("%Y-%m-%d %H:%M:%S") if project.last_heartbeat else "–ù–∏–∫–æ–≥–¥–∞"
            message += f"üìù {project.name}\n"
            message += f"üè∑Ô∏è –¢–∏–ø: {project.type}\n"
            message += f"üîë –¢–æ–∫–µ–Ω: {project.token}\n"
            message += f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
            message += f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π heartbeat: {last_heartbeat}\n\n"

        await update.message.reply_text(message)
    finally:
        db.close()

async def editproject(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç"""
    db = next(get_db())
    try:
        subscriber = db.query(Subscriber).filter_by(telegram_id=update.effective_user.id).first()
        if not subscriber or not subscriber.is_admin:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        projects = db.query(Project).all()
        if not projects:
            await update.message.reply_text("–ü—Ä–æ–µ–∫—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            return

        keyboard = []
        for project in projects:
            keyboard.append([InlineKeyboardButton(
                f"{project.name} ({project.type})", 
                callback_data=f"edit_{project.id}"
            )])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=reply_markup
        )
    finally:
        db.close()

async def deleteproject(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"""
    db = next(get_db())
    try:
        subscriber = db.query(Subscriber).filter_by(telegram_id=update.effective_user.id).first()
        if not subscriber or not subscriber.is_admin:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        projects = db.query(Project).all()
        if not projects:
            await update.message.reply_text("–ü—Ä–æ–µ–∫—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            return

        keyboard = []
        for project in projects:
            keyboard.append([InlineKeyboardButton(
                f"{project.name} ({project.type})", 
                callback_data=f"delete_{project.id}"
            )])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
            "(–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å)",
            reply_markup=reply_markup
        )
    finally:
        db.close()

async def addadmin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞"""
    db = next(get_db())
    try:
        subscriber = db.query(Subscriber).filter_by(telegram_id=update.effective_user.id).first()
        if not subscriber or not subscriber.is_admin:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        await update.message.reply_text(
            "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, "
            "–∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
    finally:
        db.close()

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    db = next(get_db())
    try:
        subscriber = db.query(Subscriber).filter_by(telegram_id=update.effective_user.id).first()
        if not subscriber or not subscriber.is_admin:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        if not context.args:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>"
            )
            return

        message_text = " ".join(context.args)
        subscribers = db.query(Subscriber).all()
        success_count = 0
        fail_count = 0

        for sub in subscribers:
            try:
                await context.bot.send_message(
                    chat_id=sub.telegram_id,
                    text=f"üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ:\n\n{message_text}"
                )
                success_count += 1
            except Exception as e:
                logger.error(f"Error sending broadcast to {sub.telegram_id}: {e}")
                fail_count += 1

        await update.message.reply_text(
            f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {fail_count}"
        )
    finally:
        db.close()

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    db = next(get_db())
    try:
        data = query.data
        if data.startswith("subscribe_"):
            project_id = int(data.split("_")[1])
            subscriber = db.query(Subscriber).filter_by(telegram_id=update.effective_user.id).first()
            
            if not subscriber:
                subscriber = Subscriber(
                    telegram_id=update.effective_user.id,
                    full_name=update.effective_user.full_name
                )
                db.add(subscriber)
            
            if not subscriber.subscribed_projects:
                subscriber.subscribed_projects = []
            
            if project_id not in subscriber.subscribed_projects:
                subscriber.subscribed_projects.append(project_id)
                db.commit()
                project = db.query(Project).get(project_id)
                await query.edit_message_text(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –ø—Ä–æ–µ–∫—Ç {project.name}")
            else:
                await query.edit_message_text("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç")

        elif data.startswith("unsubscribe_"):
            project_id = int(data.split("_")[1])
            subscriber = db.query(Subscriber).filter_by(telegram_id=update.effective_user.id).first()
            
            if subscriber and subscriber.subscribed_projects and project_id in subscriber.subscribed_projects:
                subscriber.subscribed_projects.remove(project_id)
                db.commit()
                project = db.query(Project).get(project_id)
                await query.edit_message_text(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ {project.name}")
            else:
                await query.edit_message_text("–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç")

        elif data.startswith("edit_"):
            project_id = int(data.split("_")[1])
            project = db.query(Project).get(project_id)
            if project:
                keyboard = [
                    [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"toggle_status_{project_id}")],
                    [InlineKeyboardButton("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω", callback_data=f"new_token_{project_id}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ {project.name}:\n"
                    f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if project.is_active else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
                    f"–¢–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω: {project.token}",
                    reply_markup=reply_markup
                )

        elif data.startswith("toggle_status_"):
            project_id = int(data.split("_")[2])
            project = db.query(Project).get(project_id)
            if project:
                project.is_active = not project.is_active
                db.commit()
                await query.edit_message_text(
                    f"–°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ {project.name} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: "
                    f"{'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if project.is_active else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}"
                )

        elif data.startswith("new_token_"):
            project_id = int(data.split("_")[2])
            project = db.query(Project).get(project_id)
            if project:
                project.token = str(uuid.uuid4())
                db.commit()
                await query.edit_message_text(
                    f"–î–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project.name} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω:\n"
                    f"{project.token}"
                )

        elif data.startswith("delete_"):
            project_id = int(data.split("_")[1])
            project = db.query(Project).get(project_id)
            if project:
                # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                subscribers = db.query(Subscriber).all()
                for subscriber in subscribers:
                    if subscriber.subscribed_projects and project_id in subscriber.subscribed_projects:
                        subscriber.subscribed_projects.remove(project_id)
                
                # –£–¥–∞–ª—è–µ–º —Å–∞–º –ø—Ä–æ–µ–∫—Ç
                db.delete(project)
                db.commit()
                await query.edit_message_text(f"‚úÖ –ü—Ä–æ–µ–∫—Ç {project.name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")

    finally:
        db.close()

def create_application() -> Application:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    add_project_handler = ConversationHandler(
        entry_points=[CommandHandler("addproject", add_project)],
        states={
            PROJECT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, project_name)],
            PROJECT_TYPE: [CallbackQueryHandler(project_type, pattern='^type_')],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(add_project_handler)
    application.add_handler(CommandHandler("stats", stats))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("subscribe", subscribe))
    application.add_handler(CommandHandler("unsubscribe", unsubscribe))
    application.add_handler(CommandHandler("mysubs", mysubs))
    application.add_handler(CommandHandler("listprojects", listprojects))
    application.add_handler(CommandHandler("editproject", editproject))
    application.add_handler(CommandHandler("deleteproject", deleteproject))
    application.add_handler(CommandHandler("addadmin", addadmin))
    application.add_handler(CommandHandler("broadcast", broadcast))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_callback))

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É
    job_queue = application.job_queue
    job_queue.run_repeating(check_projects_status, interval=3600, first=10)

    return application

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = create_application()
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 