from fastapi import FastAPI, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import Dict, Any
from datetime import datetime, timedelta
import json
import logging
import asyncio
from aiogram import Bot

from database.database import get_db
from database.models import Project, ErrorLog, Heartbeat, Subscriber

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
NOTIFICATION_BOT_TOKEN = "7766927049:AAHajpHBYK6-rHMp1sSyGW6AAirAZWH4oIE"
notification_bot = Bot(token=NOTIFICATION_BOT_TOKEN)

app = FastAPI(title="Error Monitor API")

async def check_projects_status():
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤
    """
    while True:
        try:
            db = next(get_db())
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–µ–∫—Ç—ã, –æ—Ç –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –±—ã–ª–æ heartbeat –±–æ–ª–µ–µ —á–∞—Å–∞
                one_hour_ago = datetime.utcnow() - timedelta(hours=1)
                inactive_projects = db.query(Project).filter(
                    Project.is_active == True,
                    (Project.last_heartbeat < one_hour_ago) | (Project.last_heartbeat == None)
                ).all()

                for project in inactive_projects:
                    logger.warning(f"Project {project.name} hasn't sent heartbeat in the last hour!")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
                    subscribers = db.query(Subscriber).filter(
                        Subscriber.subscribed_projects.contains([project.id])
                    ).all()
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞
                    for subscriber in subscribers:
                        try:
                            message = (
                                f"‚ùå <b>–í–Ω–∏–º–∞–Ω–∏–µ! –ü—Ä–æ–µ–∫—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç</b>\n\n"
                                f"üìù –ü—Ä–æ–µ–∫—Ç: <b>{project.name}</b>\n"
                                f"üè∑Ô∏è –¢–∏–ø: <b>{project.type}</b>\n"
                                f"‚ö†Ô∏è –°—Ç–∞—Ç—É—Å: <b>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ–ª–µ–µ —á–∞—Å–∞</b>\n"
                                f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: <b>{project.last_heartbeat.strftime('%d-%m-%Y %H:%M:%S') if project.last_heartbeat else '–ù–∏–∫–æ–≥–¥–∞'}</b>"
                            )
                            
                            await notification_bot.send_message(
                                chat_id=subscriber.telegram_id,
                                text=message,
                                parse_mode="HTML"
                            )
                            logger.info(f"Sent inactive project notification to subscriber {subscriber.telegram_id}")
                        except Exception as e:
                            logger.error(f"Failed to send notification to subscriber {subscriber.telegram_id}: {e}")

            finally:
                db.close()
        except Exception as e:
            logger.exception("Error in check_projects_status")
        
        await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å

@app.post("/api/v1/heartbeat")
async def heartbeat(data: Dict[Any, Any], db: Session = Depends(get_db)):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã heartbeat –æ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤
    """
    try:
        logger.debug(f"Received heartbeat data: {data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–æ–µ–∫—Ç–∞
        project = db.query(Project).filter(
            Project.token == data.get("project_token"),
            Project.is_active == True
        ).first()
        
        logger.debug(f"Found project: {project}")
        
        if not project:
            logger.warning(f"Invalid project token: {data.get('project_token')}")
            raise HTTPException(status_code=401, detail="Invalid project token")

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ heartbeat
        current_time = datetime.utcnow()
        project.last_heartbeat = current_time

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ heartbeat
        heartbeat = Heartbeat(
            project_id=project.id,
            status=data.get("status", "alive"),
            version=data.get("version"),
            additional_data=data.get("additional_data", {}),
            created_at=current_time
        )
        
        db.add(heartbeat)
        db.commit()

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        subscribers = db.query(Subscriber).filter(
            Subscriber.subscribed_projects.contains([project.id])
        ).all()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–±–æ—Ç–∞—é—â–µ–º –ø—Ä–æ–µ–∫—Ç–µ
        for subscriber in subscribers:
            try:
                message = (
                    f"‚úÖ <b>–ü—Ä–æ–µ–∫—Ç –∞–∫—Ç–∏–≤–µ–Ω</b>\n\n"
                    f"üìù –ü—Ä–æ–µ–∫—Ç: <b>{project.name}</b>\n"
                    f"üè∑Ô∏è –¢–∏–ø: <b>{project.type}</b>\n"
                    f"üìä –°—Ç–∞—Ç—É—Å: <b>{data.get('status', 'alive')}</b>\n"
                    f"üîÑ –í–µ—Ä—Å–∏—è: <b>{data.get('version', 'N/A')}</b>\n"
                    f"‚è∞ –í—Ä–µ–º—è: <b>{current_time.strftime('%d-%m-%Y %H:%M:%S')}</b>"
                )
                
                if data.get("metadata"):
                    message += "\n\nüìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:"
                    for key, value in data["metadata"].items():
                        message += f"\n‚Ä¢ {key}: <b>{value}</b>"
                
                await notification_bot.send_message(
                    chat_id=subscriber.telegram_id,
                    text=message,
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"Error sending notification to subscriber {subscriber.telegram_id}: {e}")

        return {"status": "success", "message": "Heartbeat received"}
    
    except Exception as e:
        logger.exception("Error in heartbeat endpoint")
        db.rollback()
        raise HTTPException(status_code=500, detail=str(e))

@app.on_event("startup")
async def startup_event():
    """
    –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    asyncio.create_task(check_projects_status())

async def send_notification(telegram_id: int, message: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞
    """
    try:
        await notification_bot.send_message(
            chat_id=telegram_id,
            text=message,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Failed to send notification to {telegram_id}: {e}")

async def notify_subscribers_about_error(db: Session, project: Project, error_data: Dict):
    """
    –£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –æ –Ω–æ–≤–æ–π –æ—à–∏–±–∫–µ
    """
    subscribers = db.query(Subscriber).filter(
        Subscriber.subscribed_projects.contains([project.id])
    ).all()
    
    error_message = (
        f"üö® <b>–ù–æ–≤–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ {project.name}</b>\n\n"
        f"–¢–∏–ø: {error_data.get('type', 'Unknown')}\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ: {error_data.get('message', 'No message')}\n"
        f"–í–∞–∂–Ω–æ—Å—Ç—å: {error_data.get('severity', 'error')}\n"
        f"–í—Ä–µ–º—è: {datetime.now().strftime('%d-%m-%Y %H:%M:%S')}"
    )
    
    for subscriber in subscribers:
        await send_notification(subscriber.telegram_id, error_message)

@app.post("/api/v1/log")
async def log_error(data: Dict[Any, Any], db: Session = Depends(get_db)):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ª–æ–≥–∏ –æ—à–∏–±–æ–∫ –æ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–æ–µ–∫—Ç–∞
        project = db.query(Project).filter(
            Project.token == data.get("project_token"),
            Project.is_active == True
        ).first()
        
        if not project:
            raise HTTPException(status_code=401, detail="Invalid project token")

        error_data = data.get("error", {})
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –æ—à–∏–±–∫–µ
        error_log = ErrorLog(
            project_id=project.id,
            error_type=error_data.get("type", "Unknown"),
            error_message=error_data.get("message", "No message provided"),
            stack_trace=error_data.get("stack_trace"),
            severity_level=error_data.get("severity", "error"),
            additional_data=error_data.get("context", {}),
            created_at=datetime.now()
        )
        
        db.add(error_log)
        db.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        await notify_subscribers_about_error(db, project, error_data)

        return {"status": "success", "message": "Error logged successfully"}
    
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/v1/projects")
async def get_projects(db: Session = Depends(get_db)):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    """
    projects = db.query(Project).all()
    return {"projects": [{"id": p.id, "name": p.name, "type": p.type} for p in projects]}

@app.get("/api/v1/stats")
async def get_stats(db: Session = Depends(get_db)):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—à–∏–±–∫–∞–º
    """
    total_errors = db.query(ErrorLog).count()
    active_projects = db.query(Project).filter(Project.is_active == True).count()
    
    return {
        "total_errors": total_errors,
        "active_projects": active_projects
    } 